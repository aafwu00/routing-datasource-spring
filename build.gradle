plugins {
    id 'nebula.project' version '5.2.1'
    id 'nebula.info' version '5.0.0'
    id 'nebula.optional-base' version '5.0.0'
    id 'nebula.release' version '9.2.0'
    id 'nebula.lint' version '10.4.2'

    id 'nebula.maven-publish' version '9.5.0' apply false
    id 'nebula.maven-apache-license' version '9.5.0' apply false
    id 'nebula.source-jar' version '9.5.0' apply false

    id 'org.springframework.boot' version '2.1.2.RELEASE' apply false
    id 'io.spring.dependency-management' version '1.0.6.RELEASE' apply false
    id 'io.spring.propdeps' version '0.0.10.RELEASE' apply false

    id 'com.github.spotbugs' version '1.6.9' apply false

    id 'com.github.ben-manes.versions' version '0.20.0'
    id 'com.dorongold.task-tree' version '1.3.1'
}

allprojects {
    apply plugin: 'nebula.release'
    apply plugin: 'nebula.info'
    apply plugin: 'nebula.project'
    apply plugin: 'nebula.optional-base'
    apply plugin: 'nebula.lint'

    group 'com.github.aafwu00'

    contacts {
        'aafwu00@gmail.com' {
            moniker 'Taeho Kim'
            role 'Developer'
        }
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'io.spring.dependency-management'

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = sourceCompatibility

    test {
        useJUnitPlatform()
        reports {
            html.enabled = true
        }
    }

    if (!project.name.contains('sample')) {
        apply plugin: 'checkstyle'
        apply plugin: 'com.github.spotbugs'
        apply plugin: 'pmd'
        apply plugin: 'jacoco'

        apply plugin: 'maven-publish'
        apply plugin: 'nebula.maven-publish'
        apply plugin: 'nebula.source-jar'
        apply plugin: 'nebula.maven-apache-license'

        apply plugin: 'com.dorongold.task-tree'
        apply plugin: 'com.github.ben-manes.versions'

        dependencyUpdates.resolutionStrategy = {
            componentSelection { rules ->
                rules.all { ComponentSelection selection ->
                    boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm', 'dev', 'snapshot'].any { qualifier ->
                        selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
                    }
                    if (rejected) {
                        selection.reject('Release Candidate')
                    }
                }
            }
        }

        checkstyle {
            toolVersion = '8.17'
            ignoreFailures = false
            maxErrors = 0
            maxWarnings = 0
            configFile = rootProject.file('config/checkstyle/checkstyle_checks.xml')
            configProperties = ['checkstyle.header.file'       : "${rootProject.projectDir}/config/checkstyle/java.header",
                                'checkstyle.regexp.header.file': "${rootProject.projectDir}/config/checkstyle/java_regexp.header",
                                'checkstyle.suppressions.file' : "${rootProject.projectDir}/config/checkstyle/suppressions.xml",
                                'checkstyle.importcontrol.file': "${rootProject.projectDir}/config/checkstyle/import-control.xml"]
        }

        spotbugs {
            toolVersion = '3.1.11'
            ignoreFailures = false
            effort = 'max'
            reportLevel = 'high'
        }

        pmd {
            toolVersion = '6.11.0'
            ruleSetFiles = rootProject.files('config/pmd/rulesets.xml')
            ignoreFailures = true
            rulePriority = 3
        }

        jacoco {
            toolVersion = '0.8.3'
        }

        jacocoTestReport {
            reports {
                html.enabled = true
                xml.enabled = true
                csv.enabled = false
            }
        }
    }

    if (project.name.endsWith('sample')) {
        apply plugin: 'org.springframework.boot'
    }

    if (project.name.contains('autoconfigure')) {
        apply plugin: 'propdeps'
        apply plugin: 'propdeps-maven'
        apply plugin: 'propdeps-idea'
        apply plugin: 'propdeps-eclipse'

        compileJava.dependsOn(processResources)
    }

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url 'https://jitpack.io' }
    }

    dependencyManagement {
        imports {
            mavenBom org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES
        }
    }

    dependencies {
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
        testImplementation 'org.junit.jupiter:junit-jupiter-api'
        testImplementation 'org.assertj:assertj-core'

        testImplementation 'org.springframework.boot:spring-boot-starter-test'

        if (project.name.contains('autoconfigure')) {
            annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
        }
    }
}
